{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Log Analysis with Elastic Stack",
    "Parameters": {},
    "Mappings": {
        "UserConfig": {
            "Login": {
                "Name": "student",
                "Pass": "password"
            }
        }
    },
    "Resources": {
        "DynamoLambda": {
            "DependsOn": [
                "DynamoAccessRole",
                "DynamoTable"
            ],
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "lwt({event: 'boot'});",
                                "var AWS = require('aws-sdk');",
                                "var DDB = new AWS.DynamoDB.DocumentClient();",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "var TABLE = '",
                                            {
                                                "Ref": "DynamoTable"
                                            },
                                            "';"
                                        ]
                                    ]
                                },
                                "exports.handler = function (ev, ctxt) {",
                                "  lwt({event: 'invoke', data: ev});",
                                "  switch (ev.fn) {",
                                "    case 'PUT':",
                                "      lwt({event: 'put', data: ev})",
                                "      DDB.put({TableName: TABLE, Item: ev.data}, dcb);",
                                "      break;",
                                "    case 'GET':",
                                "      lwt({event: 'get', data: ev})",
                                "      DDB.get({TableName: TABLE, Key: {id: ev.id}}, dcb);",
                                "      break;",
                                "    default:",
                                "      var e = {event: 'unknowncmd', data: ev};",
                                "      lwt(e);",
                                "      ctxt.fail(e);",
                                "      break;",
                                "  }",
                                "  function dcb (err, data) { ",
                                "    if (err) { ",
                                "      var e = {event: 'error', data: err};",
                                "      lwt(e); return ctxt.fail(e);",
                                "    }",
                                "    ctxt.done(null, {event: 'resp', data: data})",
                                "  }",
                                "};",
                                "function lwt(e) {e.timestamp = Date.now(); console.log(JSON.stringify(e));}"
                            ]
                        ]
                    }
                },
                "Description": "Dynamo PUT and GET",
                "Handler": "index.handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "DynamoAccessRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs6.10",
                "Timeout": 5
            }
        },
        "DynamoTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "id",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 3,
                    "WriteCapacityUnits": 3
                }
            }
        },
        "DynamoAccessRole": {
            "DependsOn": [
                "DynamoTable"
            ],
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                }
            }
        },
        "DynamoLambdaRolePolicy": {
            "DependsOn": [
                "DynamoAccessRole"
            ],
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {
                    "Fn::Join": [
                        "-",
                        [
                            "DynamoLambdaRolePolicy",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:*"
                            ],
                            "Resource": [
                                "*"
                            ]
                        },
                        {
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "es:*"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "DynamoAccessRole"
                    }
                ]
            }
        },
        "LambdaPolicyForElasticSearch": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "LambdaPolicyForElasticSearch",
                "Roles": [
                    {
                        "Ref": "LambdaRoleForElasticSearch"
                    }
                ],
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:*:*:*"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": "es:ESHttpPost",
                            "Resource": "arn:aws:es:*:*:*"
                        }
                    ]
                }
            }
        },
        "LambdaRoleForElasticSearch": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "LambdaElasticSearch",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "lambda.amazonaws.com"
                        },
                        "Action": "sts:AssumeRole"
                    }
                }
            }
        },
        "Group": {
            "Type": "AWS::IAM::Group",
            "Properties": {
                "GroupName": "Students",
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "students-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Deny",
                                    "Action": [
                                        "ec2:ModifyInstanceAttribute",
                                        "ec2:*Reserved*",
                                        "ec2:*Spot*",
                                        "dynamodb:*Reserved*",
                                        "rds:*Reserved*",
                                        "elasticache:*Reserved*",
                                        "redshift:*Reserved*",
                                        "aws-marketplace:*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "elasticloadbalancing:Describe*",
                                        "elasticloadbalancing:AddTags",
                                        "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
                                        "elasticloadbalancing:AttachLoadBalancerToSubnets",
                                        "elasticloadbalancing:ConfigureHealthCheck",
                                        "elasticloadbalancing:CreateAppCookieStickinessPolicy",
                                        "elasticloadbalancing:CreateLBCookieStickinessPolicy",
                                        "elasticloadbalancing:CreateLoadBalancer",
                                        "elasticloadbalancing:CreateLoadBalancerListeners",
                                        "elasticloadbalancing:CreateLoadBalancerPolicy",
                                        "elasticloadbalancing:DeleteLoadBalancer",
                                        "elasticloadbalancing:DeleteLoadBalancerListeners",
                                        "elasticloadbalancing:DeleteLoadBalancerPolicy",
                                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                        "elasticloadbalancing:DetachLoadBalancerFromSubnets",
                                        "elasticloadbalancing:DisableAvailabilityZonesForLoadBalancer",
                                        "elasticloadbalancing:EnableAvailabilityZonesForLoadBalancer",
                                        "elasticloadbalancing:ModifyLoadBalancerAttributes",
                                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                        "elasticloadbalancing:RemoveTags",
                                        "elasticloadbalancing:SetLoadBalancerListenerSSLCertificate",
                                        "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
                                        "elasticloadbalancing:SetLoadBalancerPoliciesOfListener",
                                        "es:GetUpgradeStatus",
                                        "lambda:AddPermission",
                                        "lambda:CreateAlias",
                                        "lambda:CreateEventSourceMapping",
                                        "lambda:CreateFunction",
                                        "lambda:DeleteAlias",
                                        "lambda:DeleteEventSourceMapping",
                                        "lambda:DeleteFunction",
                                        "lambda:Get*",
                                        "lambda:List*",
                                        "lambda:InvokeFunction",
                                        "lambda:Invoke",
                                        "lambda:InvokeAsync",
                                        "lambda:RemovePermission",
                                        "lambda:TagResource",
                                        "lambda:UntagResource",
                                        "lambda:UpdateAlias",
                                        "lambda:UpdateEventSourceMapping",
                                        "lambda:UpdateFunctionConfiguration",
                                        "cloudwatch:Describe*",
                                        "cloudwatch:Get*",
                                        "cloudwatch:List*",
                                        "logs:Describe*",
                                        "logs:FilterLogEvents",
                                        "logs:GetLogEvents",
                                        "logs:ListTagsLogGroup",
                                        "logs:TestMetricFilter",
                                        "logs:PutSubscriptionFilter",
                                        "cloudformation:DescribeStacks",
                                        "cloudformation:DescribeStackEvents",
                                        "cloudformation:DescribeStackResource",
                                        "cloudformation:DescribeStackResources",
                                        "cloudformation:Get*",
                                        "cloudformation:List*",
                                        "es:AddTags",
                                        "es:CreateElasticsearchDomain",
                                        "es:DeleteElasticsearchDomain",
                                        "es:Describe*",
                                        "es:List*",
                                        "es:RemoveTags",
                                        "es:UpdateElasticsearchDomainConfig",
                                        "es:GetCompatibleElasticsearchVersions",
                                        "es:GetUpgradeHistory",
                                        "ec2:DescribeVpcs",
                                        "kms:ListAliases"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "iam:GetRole",
                                        "iam:ListRoles",
                                        "iam:ListRolePolicies",
                                        "iam:GetRolePolicy",
                                        "iam:ListAttachedRolePolicies"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": "arn:aws:iam::*:role/LambdaElasticSearch",
                                    "Effect": "Allow"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "User": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "LoginProfile": {
                    "Password": {
                        "Fn::FindInMap": [
                            "UserConfig",
                            "Login",
                            "Pass"
                        ]
                    }
                },
                "Path": "/",
                "Groups": [
                    "Students"
                ],
                "UserName": {
                    "Fn::FindInMap": [
                        "UserConfig",
                        "Login",
                        "Name"
                    ]
                }
            }
        }
    },
    "Outputs": {
        "DynamoLambdaLogsLink": {
            "Description": "The AWS Console URL of the CloudWatch Logs Group for the Lambda.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://console.aws.amazon.com/cloudwatch/home?region=",
                        {
                            "Ref": "AWS::Region"
                        },
                        "#logStream:group=%252Faws%252Flambda%252F",
                        {
                            "Ref": "DynamoLambda"
                        }
                    ]
                ]
            }
        },
        "DynamoLambdaConsoleLink": {
            "Description": "The AWS Console URL of the Lambda.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://console.aws.amazon.com/lambda/home?region=",
                        {
                            "Ref": "AWS::Region"
                        },
                        "#/functions/",
                        {
                            "Ref": "DynamoLambda"
                        }
                    ]
                ]
            }
        }
    }
}